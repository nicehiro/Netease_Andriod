package org.nicehiro.ShopCar;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.nicehiro.ShopCar.shopcar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOPCAR".
*/
public class shopcarDao extends AbstractDao<shopcar, byte[]> {

    public static final String TABLENAME = "SHOPCAR";

    /**
     * Properties of entity shopcar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, byte[].class, "id", true, "ID");
        public final static Property Profile = new Property(1, byte[].class, "profile", false, "PROFILE");
        public final static Property Price = new Property(2, Float.class, "price", false, "PRICE");
        public final static Property Imagelink = new Property(3, byte[].class, "imagelink", false, "IMAGELINK");
        public final static Property Remain = new Property(4, Integer.class, "remain", false, "REMAIN");
        public final static Property Time = new Property(5, java.util.Date.class, "time", false, "TIME");
    };


    public shopcarDao(DaoConfig config) {
        super(config);
    }
    
    public shopcarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOPCAR\" (" + //
                "\"ID\" BLOB PRIMARY KEY NOT NULL ," + // 0: id
                "\"PROFILE\" BLOB," + // 1: profile
                "\"PRICE\" REAL," + // 2: price
                "\"IMAGELINK\" BLOB," + // 3: imagelink
                "\"REMAIN\" INTEGER," + // 4: remain
                "\"TIME\" INTEGER);"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOPCAR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, shopcar entity) {
        stmt.clearBindings();
        stmt.bindBlob(1, entity.getId());
 
        byte[] profile = entity.getProfile();
        if (profile != null) {
            stmt.bindBlob(2, profile);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(3, price);
        }
 
        byte[] imagelink = entity.getImagelink();
        if (imagelink != null) {
            stmt.bindBlob(4, imagelink);
        }
 
        Integer remain = entity.getRemain();
        if (remain != null) {
            stmt.bindLong(5, remain);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public byte[] readKey(Cursor cursor, int offset) {
        return cursor.getBlob(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public shopcar readEntity(Cursor cursor, int offset) {
        shopcar entity = new shopcar( //
            cursor.getBlob(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // profile
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // imagelink
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // remain
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, shopcar entity, int offset) {
        entity.setId(cursor.getBlob(offset + 0));
        entity.setProfile(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setImagelink(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setRemain(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected byte[] updateKeyAfterInsert(shopcar entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public byte[] getKey(shopcar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
